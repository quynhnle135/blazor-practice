@page "/roman"
@rendermode InteractiveServer

<h1 style="color: orange;">Roman-To-Decimal Converter</h1>

<div>
    <input type="text" placeholder="Enter Roman numeral" @bind="roman">
    <button style="border: none; border-radius: 5px; background-color: orange; color: white;" @onclick="RomanResult">Convert</button>
</div>

<h3 style="color: white; background-color: orange;">@RomanResultMessage</h3>
@code {
    private string roman { get; set; } = string.Empty;
    private string RomanResultMessage { get; set; } = "";

    bool IsValidRoman(string roman) {
        foreach (char c in roman) {
            if (!"IVXLCDM".Contains(c)) {
                return false;
            }
        }
        return true;
    } 

    int ConvertToRoman(string roman) {
        var upperRoman = roman.ToUpper();

        if (!IsValidRoman(upperRoman)) {
            RomanResultMessage = "Invalid Roman Numeral";
            return -1;
        }

        Dictionary<char, int> romanMap = new Dictionary<char, int>() {
            { 'I', 1 }, { 'V', 5 }, { 'X', 10 }, { 'L', 50 }, { 'C', 100 }, { 'D', 500 }, {'M', 1000}
        };

        int result = 0;
        for (int i = 0; i < upperRoman.Length; i++) {
            if ((i + 1 < upperRoman.Length) && (romanMap[upperRoman[i + 1]] < romanMap[upperRoman[i]])) {
                result += romanMap[upperRoman[i + 1]] - romanMap[upperRoman[i]];
                i++;
            } else {
                result += romanMap[upperRoman[i]];
            }
        }

        return result;

    }
    void RomanResult() {
        if (string.IsNullOrWhiteSpace(roman)) {
            RomanResultMessage = "Please enter a Roman numeral";
        }

        var decimalNumber = ConvertToRoman(roman);
        if (decimalNumber >= 0) {
            RomanResultMessage = $"Convert \'{roman}\' to Decimal we have: \'{decimalNumber}\'";
        }
    }
}