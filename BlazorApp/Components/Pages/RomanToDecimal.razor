@page "/roman"
@rendermode InteractiveServer

<h1 style="color: orange">Roman to Decimal Converter</h1>

<div>
    <input type="text" placeholder="Enter your Romanian number" @bind="roman" />
    <button @onclick="DecimalResult">Convert</button>
</div>

@* Decimal Result Message *@
<h3>@DecimalResultMessage</h3>

@code {
    private string roman { get; set; } = string.Empty;
    string DecimalResultMessage { get; set; } = "";

    bool IsValidRomanNumeral(string roman) {
        foreach (char c in roman) {
            if (!"IVXLCDM".Contains(c)) {
                return false;
            }
        }
        return true;
    }
    int ConvertToDecimal(string roman) {
        // Convert roman number to upper
        var upperRoman = roman.ToUpper();

        // Validate input to contain only valid Roman numeral characters
        if (!IsValidRomanNumeral(upperRoman)) {
            DecimalResultMessage = "Invalid Roman Numeral";
            return -1;
        }

        Dictionary<char, int> RomanToDecimal = new Dictionary<char, int>() {
        {'I', 1}, {'V', 5}, {'X', 10}, {'L', 50}, {'C', 100}, {'D', 500}, {'M', 1000}
        };

        int result = 0;

        for (int i = 0; i < upperRoman.Length; i++) {
            if ((i + 1 < upperRoman.Length) && (RomanToDecimal[upperRoman[i]] < RomanToDecimal[upperRoman[i + 1]])) {
                result += RomanToDecimal[upperRoman[i + 1]] - RomanToDecimal[upperRoman[i]];
                // Skip the next symbol
                i++;
            } else {
                result += RomanToDecimal[upperRoman[i]];
            }
        }
        return result;
    }

    void DecimalResult() {
        if(string.IsNullOrWhiteSpace(roman)) {
            DecimalResultMessage = "Please enter a Roman numeral.";
        }

        var decimalNumber = ConvertToDecimal(roman);
        
        if (decimalNumber >= 0) {
            DecimalResultMessage = $"Convert \'{roman}\' to Decimal we have: \'{decimalNumber}\'";
        }
    }
}